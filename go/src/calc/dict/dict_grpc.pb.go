// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dict/dict.proto

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslateServiceClient is the client API for TranslateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslateServiceClient interface {
	CalcAdd(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	CalcDiv(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error)
	CalcSub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error)
	CalcMult(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error)
	CalcSqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error)
	CalcMin(ctx context.Context, in *MinRequest, opts ...grpc.CallOption) (*MinResponse, error)
	CalcPow(ctx context.Context, in *PowRequest, opts ...grpc.CallOption) (*PowResponse, error)
}

type translateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslateServiceClient(cc grpc.ClientConnInterface) TranslateServiceClient {
	return &translateServiceClient{cc}
}

func (c *translateServiceClient) CalcAdd(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcDiv(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error) {
	out := new(DivResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcDiv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcSub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubResponse, error) {
	out := new(SubResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcMult(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error) {
	out := new(MultResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcMult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcSqrt(ctx context.Context, in *SqrtRequest, opts ...grpc.CallOption) (*SqrtResponse, error) {
	out := new(SqrtResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcSqrt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcMin(ctx context.Context, in *MinRequest, opts ...grpc.CallOption) (*MinResponse, error) {
	out := new(MinResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcMin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CalcPow(ctx context.Context, in *PowRequest, opts ...grpc.CallOption) (*PowResponse, error) {
	out := new(PowResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CalcPow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslateServiceServer is the server API for TranslateService service.
// All implementations must embed UnimplementedTranslateServiceServer
// for forward compatibility
type TranslateServiceServer interface {
	CalcAdd(context.Context, *AddRequest) (*AddResponse, error)
	CalcDiv(context.Context, *DivRequest) (*DivResponse, error)
	CalcSub(context.Context, *SubRequest) (*SubResponse, error)
	CalcMult(context.Context, *MultRequest) (*MultResponse, error)
	CalcSqrt(context.Context, *SqrtRequest) (*SqrtResponse, error)
	CalcMin(context.Context, *MinRequest) (*MinResponse, error)
	CalcPow(context.Context, *PowRequest) (*PowResponse, error)
	mustEmbedUnimplementedTranslateServiceServer()
}

// UnimplementedTranslateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslateServiceServer struct {
}

func (UnimplementedTranslateServiceServer) CalcAdd(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcAdd not implemented")
}
func (UnimplementedTranslateServiceServer) CalcDiv(context.Context, *DivRequest) (*DivResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcDiv not implemented")
}
func (UnimplementedTranslateServiceServer) CalcSub(context.Context, *SubRequest) (*SubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcSub not implemented")
}
func (UnimplementedTranslateServiceServer) CalcMult(context.Context, *MultRequest) (*MultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcMult not implemented")
}
func (UnimplementedTranslateServiceServer) CalcSqrt(context.Context, *SqrtRequest) (*SqrtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcSqrt not implemented")
}
func (UnimplementedTranslateServiceServer) CalcMin(context.Context, *MinRequest) (*MinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcMin not implemented")
}
func (UnimplementedTranslateServiceServer) CalcPow(context.Context, *PowRequest) (*PowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcPow not implemented")
}
func (UnimplementedTranslateServiceServer) mustEmbedUnimplementedTranslateServiceServer() {}

// UnsafeTranslateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslateServiceServer will
// result in compilation errors.
type UnsafeTranslateServiceServer interface {
	mustEmbedUnimplementedTranslateServiceServer()
}

func RegisterTranslateServiceServer(s grpc.ServiceRegistrar, srv TranslateServiceServer) {
	s.RegisterService(&TranslateService_ServiceDesc, srv)
}

func _TranslateService_CalcAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcAdd(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcDiv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcDiv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcDiv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcDiv(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcSub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcMult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcMult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcMult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcMult(ctx, req.(*MultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcSqrt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcSqrt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcSqrt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcSqrt(ctx, req.(*SqrtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcMin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcMin(ctx, req.(*MinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CalcPow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CalcPow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CalcPow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CalcPow(ctx, req.(*PowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslateService_ServiceDesc is the grpc.ServiceDesc for TranslateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.TranslateService",
	HandlerType: (*TranslateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalcAdd",
			Handler:    _TranslateService_CalcAdd_Handler,
		},
		{
			MethodName: "CalcDiv",
			Handler:    _TranslateService_CalcDiv_Handler,
		},
		{
			MethodName: "CalcSub",
			Handler:    _TranslateService_CalcSub_Handler,
		},
		{
			MethodName: "CalcMult",
			Handler:    _TranslateService_CalcMult_Handler,
		},
		{
			MethodName: "CalcSqrt",
			Handler:    _TranslateService_CalcSqrt_Handler,
		},
		{
			MethodName: "CalcMin",
			Handler:    _TranslateService_CalcMin_Handler,
		},
		{
			MethodName: "CalcPow",
			Handler:    _TranslateService_CalcPow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/dict.proto",
}
