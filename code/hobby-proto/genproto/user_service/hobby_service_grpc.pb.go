// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: hobby_service.proto

package user_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HobbyServiceClient is the client API for HobbyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HobbyServiceClient interface {
	Create(ctx context.Context, in *CreateHobby, opts ...grpc.CallOption) (*Hobby, error)
	GetByID(ctx context.Context, in *HobbyPrimaryKey, opts ...grpc.CallOption) (*Hobby, error)
	GetList(ctx context.Context, in *GetListHobbyRequest, opts ...grpc.CallOption) (*GetListHobbyResponse, error)
	Update(ctx context.Context, in *UpdateHobby, opts ...grpc.CallOption) (*Hobby, error)
	UpdatePatch(ctx context.Context, in *UpdatePatchHobby, opts ...grpc.CallOption) (*Hobby, error)
	Delete(ctx context.Context, in *HobbyPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type hobbyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHobbyServiceClient(cc grpc.ClientConnInterface) HobbyServiceClient {
	return &hobbyServiceClient{cc}
}

func (c *hobbyServiceClient) Create(ctx context.Context, in *CreateHobby, opts ...grpc.CallOption) (*Hobby, error) {
	out := new(Hobby)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyServiceClient) GetByID(ctx context.Context, in *HobbyPrimaryKey, opts ...grpc.CallOption) (*Hobby, error) {
	out := new(Hobby)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyServiceClient) GetList(ctx context.Context, in *GetListHobbyRequest, opts ...grpc.CallOption) (*GetListHobbyResponse, error) {
	out := new(GetListHobbyResponse)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyServiceClient) Update(ctx context.Context, in *UpdateHobby, opts ...grpc.CallOption) (*Hobby, error) {
	out := new(Hobby)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyServiceClient) UpdatePatch(ctx context.Context, in *UpdatePatchHobby, opts ...grpc.CallOption) (*Hobby, error) {
	out := new(Hobby)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/UpdatePatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hobbyServiceClient) Delete(ctx context.Context, in *HobbyPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user_service.HobbyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HobbyServiceServer is the server API for HobbyService service.
// All implementations must embed UnimplementedHobbyServiceServer
// for forward compatibility
type HobbyServiceServer interface {
	Create(context.Context, *CreateHobby) (*Hobby, error)
	GetByID(context.Context, *HobbyPrimaryKey) (*Hobby, error)
	GetList(context.Context, *GetListHobbyRequest) (*GetListHobbyResponse, error)
	Update(context.Context, *UpdateHobby) (*Hobby, error)
	UpdatePatch(context.Context, *UpdatePatchHobby) (*Hobby, error)
	Delete(context.Context, *HobbyPrimaryKey) (*empty.Empty, error)
	mustEmbedUnimplementedHobbyServiceServer()
}

// UnimplementedHobbyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHobbyServiceServer struct {
}

func (UnimplementedHobbyServiceServer) Create(context.Context, *CreateHobby) (*Hobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHobbyServiceServer) GetByID(context.Context, *HobbyPrimaryKey) (*Hobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedHobbyServiceServer) GetList(context.Context, *GetListHobbyRequest) (*GetListHobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedHobbyServiceServer) Update(context.Context, *UpdateHobby) (*Hobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHobbyServiceServer) UpdatePatch(context.Context, *UpdatePatchHobby) (*Hobby, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatch not implemented")
}
func (UnimplementedHobbyServiceServer) Delete(context.Context, *HobbyPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHobbyServiceServer) mustEmbedUnimplementedHobbyServiceServer() {}

// UnsafeHobbyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HobbyServiceServer will
// result in compilation errors.
type UnsafeHobbyServiceServer interface {
	mustEmbedUnimplementedHobbyServiceServer()
}

func RegisterHobbyServiceServer(s grpc.ServiceRegistrar, srv HobbyServiceServer) {
	s.RegisterService(&HobbyService_ServiceDesc, srv)
}

func _HobbyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHobby)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).Create(ctx, req.(*CreateHobby))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HobbyPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).GetByID(ctx, req.(*HobbyPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListHobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).GetList(ctx, req.(*GetListHobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHobby)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).Update(ctx, req.(*UpdateHobby))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyService_UpdatePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatchHobby)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).UpdatePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/UpdatePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).UpdatePatch(ctx, req.(*UpdatePatchHobby))
	}
	return interceptor(ctx, in, info, handler)
}

func _HobbyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HobbyPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HobbyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.HobbyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HobbyServiceServer).Delete(ctx, req.(*HobbyPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// HobbyService_ServiceDesc is the grpc.ServiceDesc for HobbyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HobbyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.HobbyService",
	HandlerType: (*HobbyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HobbyService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _HobbyService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _HobbyService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HobbyService_Update_Handler,
		},
		{
			MethodName: "UpdatePatch",
			Handler:    _HobbyService_UpdatePatch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HobbyService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hobby_service.proto",
}
